node v16.16.0 LTS
npm  8.11.0
npm install -g @angular/cli

MES : Manufacturing execution system.
 OP * Pro 3168 x 1440 pixels 513 ppi 
 
 REST | Representational state transfer

-------------------------------------
ERROR:
ng: File C:\Users\admin\AppData\Roaming\npm\ng.ps1 cannot be loaded because running scripts is disabled on this system. 
For more information, see about_Execution_Policies at https:/go.microsoft.com/fwlink/?LinkID=135170.
set-ExecutionPolicy RemoteSigned -Scope CurrentUser
Get-ExecutionPolicy
Get-ExecutionPolicy -list    to view the list



color : #5891a7

https://my-json-server.typicode.com/<your-username>/<your-repo> 


Hoisting : the availability/access of a variable even before the execution of the program.

lexical scope: where a variable is physically present.
scope chain :  chain of all lexical environment with its parent references.   lexical scope of GEC is null.
the whole chain of lexical environment is called the scope chain.

lexical environment : local memory + reference to the lexical env of parent(lexical parent)


a function A which is enclosed inside another function B, then function is the closure of function A.

Temporal Deadzone: is the time since when this let variable was hoisted and till it is intialized some value.
OR from hoisting till it got some value that time is called temporal dead zone.
until the js engine reaches to the to the line where a value is assigned to the let/const variables.


const : for const keyword you must have to initialize it (assign some value) at the time of declaration. 
while assigning different value to const variable it will thorow TypeError : assignemt to const variable.
you cannot left const as (const b | no assignemnt) it will throw SytaxError.


you cannot write like below

let a = 10;
let a = 20;
 it will throw syntax error : identifier a has already been decalred.
 
 Block : block is group of multipl statements  and it can be used where javascript expect single statement.
 one statement means one line of code.
 
 eg.
 if(something === true) getData();
 
 if(something === true) {
 getData();
 hidePopup = true;
 }
 
 
 Block Scope : what all are the variable and functions we can access inside a block is know as the block scope of
				those varibale and funcitons.
				
				block scrope varibales are stored in separate memory space 
				
				
Shadowing: 

var a = 100;

{
var a = 99;
let b = 80;
console.log(a) // 99
}

console.log(a) // 99     | it will change the value of variable a which is present in the globval space.


Closure : function along with its lexical scope forms closure. | IT CAB BE USED FOR DATA HIDING.
MDN Definition: functions bundled together with its surrounding state (lexical environment)


function x (){
	var a = 90;
	function y (){
	console.log(a)
	}
	a = 999;
	y();
}
z = x();

// 999

>> here when function y was returned it will be returned along with its lexical environment 
	(variables and mehtods which are present in its lexical env i.e var a)


>> when a function is returned from another function they still maintains their lexical scope.


function A(){
	function B(){
		console.log('function B')
	}
	
	return B;
}

			OR

funciton A(){
	return function B(){
		console.log('function B')
	}
}	

------EXAMPLE






function C(){
	var c = 10;
	function B(){
		var b = 100;
		return function A(){
			 console.log('inside function A',b,c)
		}
		
	}
	
	return B;
	
}

getLastFun = C;
var result = getLastFun()()
result();
console.log(getLastFun,'last function');
 OUTPUT BELOW
// inside function A 100 10
/*
 
	Æ’ C(){
		var c = 10;
		function B(){
			var b = 100;
			return function A(){
				 console.log('inside function A',b,c)
			}
			
		}
		
		return B;
		
	} 'last function'


*/
HIGHER ORDER FUNCTION :
A function which take another function as an argumenr is called higher order function.
a();
function a(b){
	b();
}

function b(){
return console.log('I'm passed inside another function');
}


FIRST CLASS FUNCTION : Ability to be used as value.

the ability of function to be useed as value and can be passed as argument in another function and can be returned from other function ika first calss function. 

ANONYMOUS FUNCTIONS
function (){
console.log('anonymous function : a function without its name')
}

FUNCTION STATEMENT | FUNCTION DECALRATION
function xyz(){
console.log('this is a statement function aka function declaration')
}


FUNCTION EXPRESSION
x();
// uncaught typeError : b is not a function
var x  =  function abc(){
console.log('function expression');
}

>>function expression will not be hoisted.


ARROW FUNCTION






CALLBACK | Callback Hell | Inversion of controles

CALLBACK HELL : A callback function inside another function and again a callback function inside this callback function.

Inversion Of Control : to manintain the avaialability of data.
Without callback JS cannot react as async.



HTTP HEADERS
HTTP headers let the client and the server pass additional information with an HTTP request or response.
An HTTP header consists of its case-insensitive name followed by a colon (:), then by its value.
Whitespace before the value is ignored.


COOKIES
As a necessary part of web browsing, HTTP cookies help web developers give you more personal, convenient website visits.
Cookies let websites remember you, your website logins, shopping carts and more.




















______________________________________________________________________________________________________________



------------	ANGULAR STARTS HERE


Directives : directives are nothing but custom attributes provided by Angular.




----------- ANGULAR ENDS HERE


GENERAL QUESTIONS
What does closure mean in programming?
What is a higher-order function in functional programming?
What are pure and impure functions?
What is idempotency, and where is it used?
What is a monad in programming?
How do you know if a function is composite?
When is function currying used?
Which is more responsive, Grid or Flex?
What are the most popular UI frameworks?
What are the advantages and disadvantages of using CSS preprocessors?




